{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar assign = require('object-assign');\n\nvar _require = require('@sanity/observable/operators/map'),\n    map = _require.map;\n\nvar _require2 = require('@sanity/observable/operators/filter'),\n    filter = _require2.filter;\n\nvar queryString = require('../http/queryString');\n\nvar validators = require('../validators');\n\nfunction AssetsClient(client) {\n  this.client = client;\n}\n\nfunction toDocument(body) {\n  // todo: rewrite to just return body.document in a while\n  var document = body.document;\n  Object.defineProperty(document, 'document', {\n    enumerable: false,\n    get: function get() {\n      // eslint-disable-next-line no-console\n      console.warn('The promise returned from client.asset.upload(...) now resolves with the asset document');\n      return document;\n    }\n  });\n  return document;\n}\n\nfunction optionsFromFile(opts, file) {\n  if (typeof window === 'undefined' || !(file instanceof window.File)) {\n    return opts;\n  }\n\n  return assign({\n    filename: opts.preserveFilename === false ? undefined : file.name,\n    contentType: file.type\n  }, opts);\n}\n\nassign(AssetsClient.prototype, {\n  /**\n   * Upload an asset\n   *\n   * @param  {String} assetType `image` or `file`\n   * @param  {File|Blob|Buffer|ReadableStream} body File to upload\n   * @param  {Object}  opts Options for the upload\n   * @param  {Boolean} opts.preserveFilename Whether or not to preserve the original filename (default: true)\n   * @param  {String}  opts.filename Filename for this file (optional)\n   * @param  {Number}  opts.timeout  Milliseconds to wait before timing the request out (default: 0)\n   * @param  {String}  opts.contentType Mime type of the file\n   * @param  {Array}   opts.extract Array of metadata parts to extract from image.\n   *                                 Possible values: `location`, `exif`, `image`, `palette`\n   * @param  {String}  opts.label Label\n   * @param  {String}  opts.title Title\n   * @param  {String}  opts.description Description\n   * @param  {String}  opts.creditLine The credit to person(s) and/or organization(s) required by the supplier of the image to be used when published\n   * @param  {Object}  opts.source Source data (when the asset is from an external service)\n   * @param  {String}  opts.source.id The (u)id of the asset within the source, i.e. 'i-f323r1E'\n   *                                  Required if source is defined\n   * @param  {String}  opts.source.name The name of the source, i.e. 'unsplash'\n   *                                  Required if source is defined\n   * @param  {String}  opts.source.url A url to where to find the asset, or get more info about it in the source\n   *                                  Optional\n   * @return {Promise} Resolves with the created asset document\n   */\n  upload: function upload(assetType, body) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    validators.validateAssetType(assetType); // If an empty array is given, explicitly set `none` to override API defaults\n\n    var meta = opts.extract || undefined;\n\n    if (meta && !meta.length) {\n      meta = ['none'];\n    }\n\n    var dataset = validators.hasDataset(this.client.clientConfig);\n    var assetEndpoint = assetType === 'image' ? 'images' : 'files';\n    var options = optionsFromFile(opts, body);\n    var tag = options.tag,\n        label = options.label,\n        title = options.title,\n        description = options.description,\n        creditLine = options.creditLine,\n        filename = options.filename,\n        source = options.source;\n    var query = {\n      label: label,\n      title: title,\n      description: description,\n      filename: filename,\n      meta: meta,\n      creditLine: creditLine\n    };\n\n    if (source) {\n      query.sourceId = source.id;\n      query.sourceName = source.name;\n      query.sourceUrl = source.url;\n    }\n\n    var observable = this.client._requestObservable({\n      tag: tag,\n      method: 'POST',\n      timeout: options.timeout || 0,\n      uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n      headers: options.contentType ? {\n        'Content-Type': options.contentType\n      } : {},\n      query: query,\n      body: body\n    });\n\n    return this.client.isPromiseAPI() ? observable.pipe(filter(function (event) {\n      return event.type === 'response';\n    }), map(function (event) {\n      return toDocument(event.body);\n    })).toPromise() : observable;\n  },\n  delete: function _delete(type, id) {\n    // eslint-disable-next-line no-console\n    console.warn('client.assets.delete() is deprecated, please use client.delete(<document-id>)');\n    var docId = id || '';\n\n    if (!/^(image|file)-/.test(docId)) {\n      docId = \"\".concat(type, \"-\").concat(docId);\n    } else if (type._id) {\n      // We could be passing an entire asset document instead of an ID\n      docId = type._id;\n    }\n\n    validators.hasDataset(this.client.clientConfig);\n    return this.client.delete(docId);\n  },\n  getImageUrl: function getImageUrl(ref, query) {\n    var id = ref._ref || ref;\n\n    if (typeof id !== 'string') {\n      throw new Error('getImageUrl() needs either an object with a _ref, or a string with an asset document ID');\n    }\n\n    if (!/^image-[A-Za-z0-9_]+-\\d+x\\d+-[a-z]{1,5}$/.test(id)) {\n      throw new Error(\"Unsupported asset ID \\\"\".concat(id, \"\\\". URL generation only works for auto-generated IDs.\"));\n    }\n\n    var _id$split = id.split('-'),\n        _id$split2 = _slicedToArray(_id$split, 4),\n        assetId = _id$split2[1],\n        size = _id$split2[2],\n        format = _id$split2[3];\n\n    validators.hasDataset(this.client.clientConfig);\n    var _this$client$clientCo = this.client.clientConfig,\n        projectId = _this$client$clientCo.projectId,\n        dataset = _this$client$clientCo.dataset;\n    var qs = query ? queryString(query) : '';\n    return \"https://cdn.sanity.io/images/\".concat(projectId, \"/\").concat(dataset, \"/\").concat(assetId, \"-\").concat(size, \".\").concat(format).concat(qs);\n  }\n});\nmodule.exports = AssetsClient;","map":{"version":3,"sources":["/Users/watson/Desktop/pixie/pixie_frontend/node_modules/@sanity/client/lib/assets/assetsClient.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","assign","require","_require","map","_require2","filter","queryString","validators","AssetsClient","client","toDocument","body","document","defineProperty","enumerable","get","console","warn","optionsFromFile","opts","file","window","File","filename","preserveFilename","undefined","contentType","type","upload","assetType","arguments","validateAssetType","meta","extract","dataset","hasDataset","clientConfig","assetEndpoint","options","tag","label","title","description","creditLine","source","query","sourceId","id","sourceName","sourceUrl","url","observable","_requestObservable","method","timeout","uri","concat","headers","isPromiseAPI","pipe","event","toPromise","delete","_delete","docId","_id","getImageUrl","ref","_ref","Error","_id$split","split","_id$split2","assetId","size","format","_this$client$clientCo","projectId","qs","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar assign = require('object-assign');\n\nvar _require = require('@sanity/observable/operators/map'),\n    map = _require.map;\n\nvar _require2 = require('@sanity/observable/operators/filter'),\n    filter = _require2.filter;\n\nvar queryString = require('../http/queryString');\n\nvar validators = require('../validators');\n\nfunction AssetsClient(client) {\n  this.client = client;\n}\n\nfunction toDocument(body) {\n  // todo: rewrite to just return body.document in a while\n  var document = body.document;\n  Object.defineProperty(document, 'document', {\n    enumerable: false,\n    get: function get() {\n      // eslint-disable-next-line no-console\n      console.warn('The promise returned from client.asset.upload(...) now resolves with the asset document');\n      return document;\n    }\n  });\n  return document;\n}\n\nfunction optionsFromFile(opts, file) {\n  if (typeof window === 'undefined' || !(file instanceof window.File)) {\n    return opts;\n  }\n\n  return assign({\n    filename: opts.preserveFilename === false ? undefined : file.name,\n    contentType: file.type\n  }, opts);\n}\n\nassign(AssetsClient.prototype, {\n  /**\n   * Upload an asset\n   *\n   * @param  {String} assetType `image` or `file`\n   * @param  {File|Blob|Buffer|ReadableStream} body File to upload\n   * @param  {Object}  opts Options for the upload\n   * @param  {Boolean} opts.preserveFilename Whether or not to preserve the original filename (default: true)\n   * @param  {String}  opts.filename Filename for this file (optional)\n   * @param  {Number}  opts.timeout  Milliseconds to wait before timing the request out (default: 0)\n   * @param  {String}  opts.contentType Mime type of the file\n   * @param  {Array}   opts.extract Array of metadata parts to extract from image.\n   *                                 Possible values: `location`, `exif`, `image`, `palette`\n   * @param  {String}  opts.label Label\n   * @param  {String}  opts.title Title\n   * @param  {String}  opts.description Description\n   * @param  {String}  opts.creditLine The credit to person(s) and/or organization(s) required by the supplier of the image to be used when published\n   * @param  {Object}  opts.source Source data (when the asset is from an external service)\n   * @param  {String}  opts.source.id The (u)id of the asset within the source, i.e. 'i-f323r1E'\n   *                                  Required if source is defined\n   * @param  {String}  opts.source.name The name of the source, i.e. 'unsplash'\n   *                                  Required if source is defined\n   * @param  {String}  opts.source.url A url to where to find the asset, or get more info about it in the source\n   *                                  Optional\n   * @return {Promise} Resolves with the created asset document\n   */\n  upload: function upload(assetType, body) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    validators.validateAssetType(assetType); // If an empty array is given, explicitly set `none` to override API defaults\n\n    var meta = opts.extract || undefined;\n\n    if (meta && !meta.length) {\n      meta = ['none'];\n    }\n\n    var dataset = validators.hasDataset(this.client.clientConfig);\n    var assetEndpoint = assetType === 'image' ? 'images' : 'files';\n    var options = optionsFromFile(opts, body);\n    var tag = options.tag,\n        label = options.label,\n        title = options.title,\n        description = options.description,\n        creditLine = options.creditLine,\n        filename = options.filename,\n        source = options.source;\n    var query = {\n      label: label,\n      title: title,\n      description: description,\n      filename: filename,\n      meta: meta,\n      creditLine: creditLine\n    };\n\n    if (source) {\n      query.sourceId = source.id;\n      query.sourceName = source.name;\n      query.sourceUrl = source.url;\n    }\n\n    var observable = this.client._requestObservable({\n      tag: tag,\n      method: 'POST',\n      timeout: options.timeout || 0,\n      uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n      headers: options.contentType ? {\n        'Content-Type': options.contentType\n      } : {},\n      query: query,\n      body: body\n    });\n\n    return this.client.isPromiseAPI() ? observable.pipe(filter(function (event) {\n      return event.type === 'response';\n    }), map(function (event) {\n      return toDocument(event.body);\n    })).toPromise() : observable;\n  },\n  delete: function _delete(type, id) {\n    // eslint-disable-next-line no-console\n    console.warn('client.assets.delete() is deprecated, please use client.delete(<document-id>)');\n    var docId = id || '';\n\n    if (!/^(image|file)-/.test(docId)) {\n      docId = \"\".concat(type, \"-\").concat(docId);\n    } else if (type._id) {\n      // We could be passing an entire asset document instead of an ID\n      docId = type._id;\n    }\n\n    validators.hasDataset(this.client.clientConfig);\n    return this.client.delete(docId);\n  },\n  getImageUrl: function getImageUrl(ref, query) {\n    var id = ref._ref || ref;\n\n    if (typeof id !== 'string') {\n      throw new Error('getImageUrl() needs either an object with a _ref, or a string with an asset document ID');\n    }\n\n    if (!/^image-[A-Za-z0-9_]+-\\d+x\\d+-[a-z]{1,5}$/.test(id)) {\n      throw new Error(\"Unsupported asset ID \\\"\".concat(id, \"\\\". URL generation only works for auto-generated IDs.\"));\n    }\n\n    var _id$split = id.split('-'),\n        _id$split2 = _slicedToArray(_id$split, 4),\n        assetId = _id$split2[1],\n        size = _id$split2[2],\n        format = _id$split2[3];\n\n    validators.hasDataset(this.client.clientConfig);\n    var _this$client$clientCo = this.client.clientConfig,\n        projectId = _this$client$clientCo.projectId,\n        dataset = _this$client$clientCo.dataset;\n    var qs = query ? queryString(query) : '';\n    return \"https://cdn.sanity.io/images/\".concat(projectId, \"/\").concat(dataset, \"/\").concat(assetId, \"-\").concat(size, \".\").concat(format).concat(qs);\n  }\n});\nmodule.exports = AssetsClient;"]},"metadata":{},"sourceType":"script"}