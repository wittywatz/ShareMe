{"ast":null,"code":"var _jsxFileName = \"/Users/watson/Desktop/pixie/pixie_frontend/src/components/Feed.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { client } from '../client';\nimport { feedQuery, searchQuery } from '../utils/data';\nimport MasonryLayout from './MasonryLayout';\nimport Spinner from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Feed = () => {\n  _s();\n\n  const [pins, setPins] = useState();\n  const [loading, setLoading] = useState(false);\n  const {\n    categoryId\n  } = useParams();\n  useEffect(() => {\n    if (categoryId) {\n      setLoading(true);\n      const query = searchQuery(categoryId);\n      client.fetch(query).then(data => {\n        setPins(data);\n        setLoading(false);\n      });\n    } else {\n      setLoading(true);\n      client.fetch(feedQuery).then(data => {\n        setPins(data);\n        setLoading(false);\n      });\n    }\n  }, [categoryId]);\n  const ideaName = categoryId || 'new';\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      message: `We are adding ${ideaName} ideas to your feed!`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pins && /*#__PURE__*/_jsxDEV(MasonryLayout, {\n      pins: pins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Feed, \"who1TNG9vWykFi4MbDopG/iTpR0=\", false, function () {\n  return [useParams];\n});\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/watson/Desktop/pixie/pixie_frontend/src/components/Feed.jsx"],"names":["React","useState","useEffect","useParams","client","feedQuery","searchQuery","MasonryLayout","Spinner","Feed","pins","setPins","loading","setLoading","categoryId","query","fetch","then","data","ideaName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,eAAvC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,EAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAiBX,SAAS,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,UAAJ,EAAgB;AACdD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAME,KAAK,GAAGT,WAAW,CAACQ,UAAD,CAAzB;AACAV,MAAAA,MAAM,CAACY,KAAP,CAAaD,KAAb,EAAoBE,IAApB,CAA0BC,IAAD,IAAU;AACjCP,QAAAA,OAAO,CAACO,IAAD,CAAP;AACAL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID,KAPD,MAOO;AACLA,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEAT,MAAAA,MAAM,CAACY,KAAP,CAAaX,SAAb,EAAwBY,IAAxB,CAA8BC,IAAD,IAAU;AACrCP,QAAAA,OAAO,CAACO,IAAD,CAAP;AACAL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID;AACF,GAhBQ,EAgBN,CAACC,UAAD,CAhBM,CAAT;AAiBA,QAAMK,QAAQ,GAAGL,UAAU,IAAI,KAA/B;;AACA,MAAIF,OAAJ,EAAa;AACX,wBACE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAG,iBAAgBO,QAAS;AAA5C;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AACD,sBACE;AAAA,cACGT,IAAI,iBACH,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnCD;;GAAMD,I;UAGmBN,S;;;KAHnBM,I;AAqCN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { client } from '../client';\nimport { feedQuery, searchQuery } from '../utils/data';\nimport MasonryLayout from './MasonryLayout';\nimport Spinner from './Spinner';\n\nconst Feed = () => {\n  const [pins, setPins] = useState();\n  const [loading, setLoading] = useState(false);\n  const { categoryId } = useParams();\n\n  useEffect(() => {\n    if (categoryId) {\n      setLoading(true);\n      const query = searchQuery(categoryId);\n      client.fetch(query).then((data) => {\n        setPins(data);\n        setLoading(false);\n      });\n    } else {\n      setLoading(true);\n\n      client.fetch(feedQuery).then((data) => {\n        setPins(data);\n        setLoading(false);\n      });\n    }\n  }, [categoryId]);\n  const ideaName = categoryId || 'new';\n  if (loading) {\n    return (\n      <Spinner message={`We are adding ${ideaName} ideas to your feed!`} />\n    );\n  }\n  return (\n    <div>\n      {pins && (\n        <MasonryLayout pins={pins} />\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}