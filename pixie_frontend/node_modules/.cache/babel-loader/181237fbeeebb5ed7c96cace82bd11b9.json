{"ast":null,"code":"'use strict';\n/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\n\nfunction FetchXhr() {\n  this.readyState = 0; // Unsent\n}\n\nFetchXhr.prototype.open = function (method, url) {\n  this._method = method;\n  this._url = url;\n  this._resHeaders = '';\n  this.readyState = 1; // Open\n\n  this.onreadystatechange();\n};\n\nFetchXhr.prototype.abort = function () {\n  if (this._controller) {\n    this._controller.abort();\n  }\n};\n\nFetchXhr.prototype.getAllResponseHeaders = function () {\n  return this._resHeaders;\n};\n\nFetchXhr.prototype.setRequestHeader = function (key, value) {\n  this._headers = this._headers || {};\n  this._headers[key] = value;\n};\n\nFetchXhr.prototype.send = function (body) {\n  var _this = this; // eslint-disable-next-line no-multi-assign\n\n\n  var ctrl = this._controller = typeof AbortController === 'function' && new AbortController();\n  var textBody = this.responseType !== 'arraybuffer';\n  var options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal,\n    body: body // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a window check :/\n\n  };\n\n  if (typeof window !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit';\n  }\n\n  fetch(this._url, options).then(function (res) {\n    res.headers.forEach(function (value, key) {\n      _this._resHeaders += key + ': ' + value + '\\r\\n';\n    });\n    _this.status = res.status;\n    _this.statusText = res.statusText;\n    _this.readyState = 3; // Loading\n\n    return textBody ? res.text() : res.arrayBuffer();\n  }).then(function (resBody) {\n    if (textBody) {\n      _this.responseText = resBody;\n    } else {\n      _this.response = resBody;\n    }\n\n    _this.readyState = 4; // Done\n\n    _this.onreadystatechange();\n  }).catch(function (err) {\n    if (err.name === 'AbortError') {\n      _this.onabort();\n\n      return;\n    }\n\n    _this.onerror(err);\n  });\n};\n\nmodule.exports = FetchXhr;","map":{"version":3,"sources":["../../../src/request/browser/fetchXhr.js"],"names":["FetchXhr","ctrl","textBody","options","method","headers","signal","body","fetch","res","key","err","module"],"mappings":"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","sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0 // Unsent\n}\nFetchXhr.prototype.open = function(method, url) {\n  this._method = method\n  this._url = url\n  this._resHeaders = ''\n  this.readyState = 1 // Open\n  this.onreadystatechange()\n}\nFetchXhr.prototype.abort = function() {\n  if (this._controller) {\n    this._controller.abort()\n  }\n}\nFetchXhr.prototype.getAllResponseHeaders = function() {\n  return this._resHeaders\n}\nFetchXhr.prototype.setRequestHeader = function(key, value) {\n  this._headers = this._headers || {}\n  this._headers[key] = value\n}\nFetchXhr.prototype.send = function(body) {\n  // eslint-disable-next-line no-multi-assign\n  const ctrl = (this._controller = typeof AbortController === 'function' && new AbortController())\n  const textBody = this.responseType !== 'arraybuffer'\n  const options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal,\n    body\n  }\n\n  // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n  if (typeof window !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit'\n  }\n\n  fetch(this._url, options)\n    .then(res => {\n      res.headers.forEach((value, key) => {\n        this._resHeaders += `${key}: ${value}\\r\\n`\n      })\n      this.status = res.status\n      this.statusText = res.statusText\n      this.readyState = 3 // Loading\n      return textBody ? res.text() : res.arrayBuffer()\n    })\n    .then(resBody => {\n      if (textBody) {\n        this.responseText = resBody\n      } else {\n        this.response = resBody\n      }\n      this.readyState = 4 // Done\n      this.onreadystatechange()\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        this.onabort()\n        return\n      }\n\n      this.onerror(err)\n    })\n}\n\nmodule.exports = FetchXhr\n"]},"metadata":{},"sourceType":"script"}