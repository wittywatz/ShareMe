{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.SanityImageUrlBuilder = factory();\n})(this, function () {\n  var example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n\n  function parseAssetId(ref) {\n    var ref$1 = ref.split('-');\n    var id = ref$1[1];\n    var dimensionString = ref$1[2];\n    var format = ref$1[3];\n\n    if (!id || !dimensionString || !format) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    var ref$2 = dimensionString.split('x');\n    var imgWidthStr = ref$2[0];\n    var imgHeightStr = ref$2[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n\n    if (!isValidAssetId) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    return {\n      id: id,\n      width: width,\n      height: height,\n      format: format\n    };\n  }\n\n  var isRef = function (src) {\n    var source = src;\n    return source ? typeof source._ref === 'string' : false;\n  };\n\n  var isAsset = function (src) {\n    var source = src;\n    return source ? typeof source._id === 'string' : false;\n  };\n\n  var isAssetStub = function (src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === 'string' : false;\n  }; // Convert an asset-id, asset or image to an image record suitable for processing\n  // eslint-disable-next-line complexity\n\n\n  function parseSource(source) {\n    if (!source) {\n      return null;\n    }\n\n    var image;\n\n    if (typeof source === 'string' && isUrl(source)) {\n      // Someone passed an existing image url?\n      image = {\n        asset: {\n          _ref: urlToId(source)\n        }\n      };\n    } else if (typeof source === 'string') {\n      // Just an asset id\n      image = {\n        asset: {\n          _ref: source\n        }\n      };\n    } else if (isRef(source)) {\n      // We just got passed an asset directly\n      image = {\n        asset: source\n      };\n    } else if (isAsset(source)) {\n      // If we were passed an image asset document\n      image = {\n        asset: {\n          _ref: source._id || ''\n        }\n      };\n    } else if (isAssetStub(source)) {\n      // If we were passed a partial asset (`url`, but no `_id`)\n      image = {\n        asset: {\n          _ref: urlToId(source.asset.url)\n        }\n      };\n    } else if (typeof source.asset === 'object') {\n      // Probably an actual image with materialized asset\n      image = source;\n    } else {\n      // We got something that does not look like an image, or it is an image\n      // that currently isn't sporting an asset.\n      return null;\n    }\n\n    var img = source;\n\n    if (img.crop) {\n      image.crop = img.crop;\n    }\n\n    if (img.hotspot) {\n      image.hotspot = img.hotspot;\n    }\n\n    return applyDefaults(image);\n  }\n\n  function isUrl(url) {\n    return /^https?:\\/\\//.test(\"\" + url);\n  }\n\n  function urlToId(url) {\n    var parts = url.split('/').slice(-1);\n    return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n  } // Mock crop and hotspot if image lacks it\n\n\n  function applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n      return image;\n    } // We need to pad in default values for crop or hotspot\n\n\n    var result = Object.assign({}, image);\n\n    if (!result.crop) {\n      result.crop = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n    }\n\n    if (!result.hotspot) {\n      result.hotspot = {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      };\n    }\n\n    return result;\n  }\n\n  var SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop'], ['saturation', 'sat'], ['auto', 'auto'], ['dpr', 'dpr'], ['pad', 'pad']];\n\n  function urlForImage(options) {\n    var spec = Object.assign({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = parseSource(source);\n\n    if (!image) {\n      throw new Error(\"Unable to resolve image URL from source (\" + JSON.stringify(source) + \")\");\n    }\n\n    var id = image.asset._ref || image.asset._id || '';\n    var asset = parseAssetId(id); // Compute crop rect in terms of pixel coordinates in the raw source image\n\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n      left: cropLeft,\n      top: cropTop,\n      width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n      height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    }; // Compute hot spot rect in terms of pixel coordinates\n\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n      left: hotSpotCenterX - hotSpotHorizontalRadius,\n      top: hotSpotCenterY - hotSpotVerticalRadius,\n      right: hotSpotCenterX + hotSpotHorizontalRadius,\n      bottom: hotSpotCenterY + hotSpotVerticalRadius\n    }; // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n      spec = Object.assign({}, spec, fit({\n        crop: crop,\n        hotspot: hotspot\n      }, spec));\n    }\n\n    return specToImageUrl(Object.assign({}, spec, {\n      asset: asset\n    }));\n  } // eslint-disable-next-line complexity\n\n\n  function specToImageUrl(spec) {\n    var cdnUrl = spec.baseUrl || 'https://cdn.sanity.io';\n    var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format;\n    var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n    var params = [];\n\n    if (spec.rect) {\n      // Only bother url with a crop if it actually crops anything\n      var ref = spec.rect;\n      var left = ref.left;\n      var top = ref.top;\n      var width = ref.width;\n      var height = ref.height;\n      var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n\n      if (isEffectiveCrop) {\n        params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n      }\n    }\n\n    if (spec.bg) {\n      params.push(\"bg=\" + spec.bg);\n    }\n\n    if (spec.focalPoint) {\n      params.push(\"fp-x=\" + spec.focalPoint.x);\n      params.push(\"fp-y=\" + spec.focalPoint.y);\n    }\n\n    var flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('');\n\n    if (flip) {\n      params.push(\"flip=\" + flip);\n    } // Map from spec name to url param name, and allow using the actual param name as an alternative\n\n\n    SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n      var specName = mapping[0];\n      var param = mapping[1];\n\n      if (typeof spec[specName] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n      } else if (typeof spec[param] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[param]));\n      }\n    });\n\n    if (params.length === 0) {\n      return baseUrl;\n    }\n\n    return baseUrl + \"?\" + params.join('&');\n  }\n\n  function fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height; // If we are not constraining the aspect ratio, we'll just use the whole crop\n\n    if (!(imgWidth && imgHeight)) {\n      return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: source.crop\n      };\n    }\n\n    var crop = source.crop;\n    var hotspot = source.hotspot; // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n\n    if (cropAspectRatio > desiredAspectRatio) {\n      // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n      var height = Math.round(crop.height);\n      var width = Math.round(height * desiredAspectRatio);\n      var top = Math.max(0, Math.round(crop.top)); // Center output horizontally over hotspot\n\n      var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n      var left = Math.max(0, Math.round(hotspotXCenter - width / 2)); // Keep output within crop\n\n      if (left < crop.left) {\n        left = crop.left;\n      } else if (left + width > crop.left + crop.width) {\n        left = crop.left + crop.width - width;\n      }\n\n      cropRect = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n    } else {\n      // The crop is taller than the desired ratio, we are cutting from top and bottom\n      var width$1 = crop.width;\n      var height$1 = Math.round(width$1 / desiredAspectRatio);\n      var left$1 = Math.max(0, Math.round(crop.left)); // Center output vertically over hotspot\n\n      var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n      var top$1 = Math.max(0, Math.round(hotspotYCenter - height$1 / 2)); // Keep output rect within crop\n\n      if (top$1 < crop.top) {\n        top$1 = crop.top;\n      } else if (top$1 + height$1 > crop.top + crop.height) {\n        top$1 = crop.top + crop.height - height$1;\n      }\n\n      cropRect = {\n        left: left$1,\n        top: top$1,\n        width: width$1,\n        height: height$1\n      };\n    }\n\n    return {\n      width: imgWidth,\n      height: imgHeight,\n      rect: cropRect\n    };\n  } // For backwards-compatibility\n\n\n  var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\n  var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n  var validAutoModes = ['format'];\n\n  function isSanityClientLike(client) {\n    return client ? typeof client.clientConfig === 'object' : false;\n  }\n\n  function rewriteSpecName(key) {\n    var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n\n    for (var i = 0, list = specs; i < list.length; i += 1) {\n      var entry = list[i];\n      var specName = entry[0];\n      var param = entry[1];\n\n      if (key === specName || key === param) {\n        return specName;\n      }\n    }\n\n    return key;\n  }\n\n  function urlBuilder(options) {\n    // Did we get a SanityClient?\n    var client = options;\n\n    if (isSanityClientLike(client)) {\n      // Inherit config from client\n      var ref = client.clientConfig;\n      var apiUrl = ref.apiHost;\n      var projectId = ref.projectId;\n      var dataset = ref.dataset;\n      var apiHost = apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: projectId,\n        dataset: dataset\n      });\n    } // Or just accept the options as given\n\n\n    return new ImageUrlBuilder(null, options);\n  }\n\n  var ImageUrlBuilder = function ImageUrlBuilder(parent, options) {\n    this.options = parent ? Object.assign({}, parent.options || {}, options || {}) // Merge parent options\n    : Object.assign({}, options || {}); // Copy options\n  };\n\n  ImageUrlBuilder.prototype.withOptions = function withOptions(options) {\n    var baseUrl = options.baseUrl || this.options.baseUrl;\n    var newOptions = {\n      baseUrl: baseUrl\n    };\n\n    for (var key in options) {\n      if (options.hasOwnProperty(key)) {\n        var specKey = rewriteSpecName(key);\n        newOptions[specKey] = options[key];\n      }\n    }\n\n    return new ImageUrlBuilder(this, Object.assign({}, {\n      baseUrl: baseUrl\n    }, newOptions));\n  }; // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n\n\n  ImageUrlBuilder.prototype.image = function image(source) {\n    return this.withOptions({\n      source: source\n    });\n  }; // Specify the dataset\n\n\n  ImageUrlBuilder.prototype.dataset = function dataset(dataset$1) {\n    return this.withOptions({\n      dataset: dataset$1\n    });\n  }; // Specify the projectId\n\n\n  ImageUrlBuilder.prototype.projectId = function projectId(projectId$1) {\n    return this.withOptions({\n      projectId: projectId$1\n    });\n  }; // Specify background color\n\n\n  ImageUrlBuilder.prototype.bg = function bg(bg$1) {\n    return this.withOptions({\n      bg: bg$1\n    });\n  }; // Set DPR scaling factor\n\n\n  ImageUrlBuilder.prototype.dpr = function dpr(dpr$1) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr$1 && dpr$1 !== 1 ? {\n      dpr: dpr$1\n    } : {});\n  }; // Specify the width of the image in pixels\n\n\n  ImageUrlBuilder.prototype.width = function width(width$1) {\n    return this.withOptions({\n      width: width$1\n    });\n  }; // Specify the height of the image in pixels\n\n\n  ImageUrlBuilder.prototype.height = function height(height$1) {\n    return this.withOptions({\n      height: height$1\n    });\n  }; // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n\n\n  ImageUrlBuilder.prototype.focalPoint = function focalPoint(x, y) {\n    return this.withOptions({\n      focalPoint: {\n        x: x,\n        y: y\n      }\n    });\n  };\n\n  ImageUrlBuilder.prototype.maxWidth = function maxWidth(maxWidth$1) {\n    return this.withOptions({\n      maxWidth: maxWidth$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.minWidth = function minWidth(minWidth$1) {\n    return this.withOptions({\n      minWidth: minWidth$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.maxHeight = function maxHeight(maxHeight$1) {\n    return this.withOptions({\n      maxHeight: maxHeight$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.minHeight = function minHeight(minHeight$1) {\n    return this.withOptions({\n      minHeight: minHeight$1\n    });\n  }; // Specify width and height in pixels\n\n\n  ImageUrlBuilder.prototype.size = function size(width, height) {\n    return this.withOptions({\n      width: width,\n      height: height\n    });\n  }; // Specify blur between 0 and 100\n\n\n  ImageUrlBuilder.prototype.blur = function blur(blur$1) {\n    return this.withOptions({\n      blur: blur$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.sharpen = function sharpen(sharpen$1) {\n    return this.withOptions({\n      sharpen: sharpen$1\n    });\n  }; // Specify the desired rectangle of the image\n\n\n  ImageUrlBuilder.prototype.rect = function rect(left, top, width, height) {\n    return this.withOptions({\n      rect: {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      }\n    });\n  }; // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n\n\n  ImageUrlBuilder.prototype.format = function format(format$1) {\n    return this.withOptions({\n      format: format$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.invert = function invert(invert$1) {\n    return this.withOptions({\n      invert: invert$1\n    });\n  }; // Rotation in degrees 0, 90, 180, 270\n\n\n  ImageUrlBuilder.prototype.orientation = function orientation(orientation$1) {\n    return this.withOptions({\n      orientation: orientation$1\n    });\n  }; // Compression quality 0-100\n\n\n  ImageUrlBuilder.prototype.quality = function quality(quality$1) {\n    return this.withOptions({\n      quality: quality$1\n    });\n  }; // Make it a download link. Parameter is default filename.\n\n\n  ImageUrlBuilder.prototype.forceDownload = function forceDownload(download) {\n    return this.withOptions({\n      download: download\n    });\n  }; // Flip image horizontally\n\n\n  ImageUrlBuilder.prototype.flipHorizontal = function flipHorizontal() {\n    return this.withOptions({\n      flipHorizontal: true\n    });\n  }; // Flip image vertically\n\n\n  ImageUrlBuilder.prototype.flipVertical = function flipVertical() {\n    return this.withOptions({\n      flipVertical: true\n    });\n  }; // Ignore crop/hotspot from image record, even when present\n\n\n  ImageUrlBuilder.prototype.ignoreImageParams = function ignoreImageParams() {\n    return this.withOptions({\n      ignoreImageParams: true\n    });\n  };\n\n  ImageUrlBuilder.prototype.fit = function fit(value) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(\"Invalid fit mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      fit: value\n    });\n  };\n\n  ImageUrlBuilder.prototype.crop = function crop(value) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(\"Invalid crop mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      crop: value\n    });\n  }; // Saturation\n\n\n  ImageUrlBuilder.prototype.saturation = function saturation(saturation$1) {\n    return this.withOptions({\n      saturation: saturation$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.auto = function auto(value) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(\"Invalid auto mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      auto: value\n    });\n  }; // Specify the number of pixels to pad the image\n\n\n  ImageUrlBuilder.prototype.pad = function pad(pad$1) {\n    return this.withOptions({\n      pad: pad$1\n    });\n  }; // Gets the url based on the submitted parameters\n\n\n  ImageUrlBuilder.prototype.url = function url() {\n    return urlForImage(this.options);\n  }; // Alias for url()\n\n\n  ImageUrlBuilder.prototype.toString = function toString() {\n    return this.url();\n  };\n\n  return urlBuilder;\n});","map":{"version":3,"sources":["../../src/parseAssetId.ts","../../src/parseSource.ts","../../src/urlForImage.ts","../../src/builder.ts"],"names":["const","example","parseAssetId","ref","id","dimensionString","format","imgWidthStr","imgHeightStr","width","height","isValidAssetId","isFinite","isRef","src","source","isAsset","isAssetStub","parseSource","isUrl","image","asset","_ref","urlToId","img","applyDefaults","parts","url","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","projectId","dataset","params","rect","isEffectiveCrop","bg","flip","mapping","specName","param","encodeURIComponent","imgWidth","imgHeight","desiredAspectRatio","cropAspectRatio","hotspotXCenter","cropRect","hotspotYCenter","validFits","validCrops","validAutoModes","client","specs","entry","key","urlBuilder","isSanityClientLike","apiUrl","clientConfig","apiHost","ImageUrlBuilder","constructor","parent","withOptions","newOptions","specKey","rewriteSpecName","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","pad","toString"],"mappings":"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","sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}